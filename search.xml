<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World-模版</title>
    <url>/2023/04/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>机器学习（1）机器学习理论</title>
    <url>/2023/04/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<p><strong>一、 <a href="https://blog.csdn.net/FrankieHello/article/details/94022594">机器学习中参数模型和非参数模型理解</a></strong></p>
<p><strong>参数模型通常假设总体服从某个分布，这个分布可以由一些参数确定，如正态分布由均值和标准差确定，在此基础上构建的模型称为参数模型</strong>；非参数模型对于总体的分布不做任何假设或者说是数据分布假设自由，只知道其分布是存在的，所以就无法得到其分布的相关参数，只能通过非参数统计的方法进行推断。</p>
<p><strong>参数模型</strong>：线性回归、逻辑回归、感知机、基本型的SVM</p>
<p><strong>非参数模型</strong>：决策树、对偶型的SVM、朴素贝叶斯、神经网络</p>
<h3 id="二、-判别模型-VS-生成模型"><a href="#二、-判别模型-VS-生成模型" class="headerlink" title="二、 判别模型 VS 生成模型"></a>二、 判别模型 VS 生成模型</h3><blockquote>
<p>  判别模型与生成模型，概率模型与非概率模型、参数模型与非参数模型总结 - Eureka的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/37821985">https://zhuanlan.zhihu.com/p/37821985</a></p>
<p>  <strong>机器学习中的判别式模型和生成式模型</strong> - Microstrong的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/74586507">https://zhuanlan.zhihu.com/p/74586507</a></p>
</blockquote>
<img src="pic/v2-9b345d3e93a81dc4e7a88fccff3720b3_b.png" alt="img" style="zoom: 67%;" />



<h5 id="判别模型：感知机、逻辑斯特回归、支持向量机、神经网络、k近邻都属于判别学习模型。"><a href="#判别模型：感知机、逻辑斯特回归、支持向量机、神经网络、k近邻都属于判别学习模型。" class="headerlink" title="判别模型：感知机、逻辑斯特回归、支持向量机、神经网络、k近邻都属于判别学习模型。"></a>判别模型：感知机、逻辑斯特回归、支持向量机、神经网络、k近邻都属于判别学习模型。</h5><p><strong>判别模型分为两种:</strong></p>
<ul>
<li>直接对输入空间到输出空间的映射进行建模, 也就是学习函数 $h$ :</li>
</ul>
<p>$$<br>h: X \rightarrow Y, s . t . y&#x3D;h(x)<br>$$</p>
<ul>
<li>对条件概率 $P(y \mid x)$ 进行建模, 然后根据贝叶斯风险最小化的准则进行分类: 【</li>
</ul>
<p>$$<br>y&#x3D;\arg \max _{y \in{-1,1}} P(y \mid x)<br>$$</p>
<h5 id="生成模型："><a href="#生成模型：" class="headerlink" title="生成模型："></a>生成模型：</h5><p>生成模型是间接地, 先对 $P(x, y)$ 进行建模, 再根据贝叶斯公式:<br>$$<br>P(y \mid x)&#x3D;\frac{P(x \mid y) P(y)}{P(x)}<br>$$<br>算出 $P(y \mid x)$, 最后根据 $\arg \max _{y \in{-1,1}} P(y \mid x)$ 来做分类 (由此可知, 判别模型实际上不需要对 $P(x, y)$ 进行建模)。</p>
<h3 id="三、-非概率模型-VS-概率模型"><a href="#三、-非概率模型-VS-概率模型" class="headerlink" title="三、 非概率模型 VS 概率模型"></a>三、 非概率模型 VS 概率模型</h3><p>两者的本质区别在于是否涉及到概率分布。</p>
<h4 id="概率模型"><a href="#概率模型" class="headerlink" title="概率模型"></a><strong>概率模型</strong></h4><blockquote>
<p>  <strong>线性回归（高斯分布）、LR（伯努利分布）、高斯判别分析、朴素贝叶斯</strong></p>
</blockquote>
<p><strong>概率模型指出了学习的目的是学出 <img src="/pic/equation" alt="[公式]"> 或 <img src="/pic/equation-20230416155658328" alt="[公式]">，但最后都是根据 <img src="/pic/equation-20230416155658387" alt="[公式]"> 来做判别归类</strong>。对于 <img src="https://www.zhihu.com/equation?tex=P(x,y)" alt="[公式]"> 的估计，一般是根据乘法公式 <img src="/pic/equation-20230416155658373" alt="[公式]"> 将其拆解成 <img src="/pic/equation-20230416155658388" alt="[公式]"> 分别进行估计。无论是对 <img src="https://www.zhihu.com/equation?tex=P(x%7Cy),P(y)" alt="[公式]"> 还是 <img src="https://www.zhihu.com/equation?tex=P(y%7Cx)" alt="[公式]"> 的估计，都是会先假设分布的形式，例如逻辑斯特回归就假设了 <img src="/pic/equation-20230416155658370" alt="[公式]"> 服从伯努利分布。分布形式固定以后，剩下的就是分布参数的估计问题。<strong>常用的估计有极大似然估计(MLE)和极大后验概率估计(MAP)等</strong>。其中，极大后验概率估计涉及到分布参数的先验概率，这为我们注入先验知识提供了途径。逻辑斯特回归、高斯判别分析、朴素贝叶斯都属于概率模型。</p>
<p>在一定的条件下，非概率模型与概率模型有以下对应关系:</p>
<img src="pic/v2-70105273742bb35eba11ec79151573cc_1440w.jpg" alt="img" style="zoom:50%;" />

<h4 id="非概率模型"><a href="#非概率模型" class="headerlink" title="非概率模型"></a>非概率模型</h4><blockquote>
<p>  <strong>感知机、支持向量机、神经网络、k近邻都属于非概率模型</strong>。线性支持向量机可以显式地写出损失函数——hinge损失。神经网络也可以显式地写出损失函数——平方损失。</p>
</blockquote>
<p><strong>非概率模型指的是直接学习输入空间到输出空间的映射 <img src="/pic/equation-20230416155658397" alt="[公式]"> ，学习的过程中基本不涉及概率密度的估计，概率密度的积分等操作，问题的关键在于最优化问题的求解</strong>。通常，为了学习假设 <img src="/pic/equation-20230416155658515" alt="[公式]"> ，我们会先根据一些先验知识(prior knowledge) 来选择一个特定的假设空间 <img src="/pic/equation-20230416155658453" alt="[公式]"> (函数空间)，例如一个由所有线性函数构成的空间，然后在这个空间中找出泛化误差最小的假设出来，</p>
<p><img src="/pic/equation-20230416155658478" alt="[公式]"></p>
<p>其中 <img src="/pic/equation-20230416155658487" alt="[公式]"> 是我们选取的损失函数，选择不同的损失函数，得到假设的泛化误差就会不一样。由于我们并不知道 <img src="https://www.zhihu.com/equation?tex=P(x,y)" alt="[公式]"> ，所以即使我们选好了损失函数，也无法计算出假设的泛化误差，更别提找到那个给出最小泛化误差的假设。于是，我们转而去找那个使得经验误差最小的假设，</p>
<p>$$<br>g&#x3D;\arg \min _{h \in H} \hat{\varepsilon}(h)&#x3D;\arg \min <em>{h \in H} \frac{1}{m} \sum</em>{i&#x3D;1}^{m} l\left(h\left(x^{(i)}\right), y^{(i)}\right)<br>$$<br>**<font color = red> 这种学习的策略叫经验误差最小化(ERM)，理论依据是大数定律：当训练样例无穷多的时候，假设的经验误差会依概率收敛到假设的泛化误差。</font>**要想成功地学习一个问题，必须在学习的过程中注入先验知识。前面，我们根据先验知识来选择假设空间，其实，在选定了假设空间后，先验知识还可以继续发挥作用，这一点体现在为我们的优化问题加上正则化项上，例如常用的 <img src="/pic/equation-20230416155658563" alt="[公式]"> 正则化， <img src="/pic/equation-20230416155658663" alt="[公式]"> 正则化等。<br>$$<br>g&#x3D;\arg \min _{h \in H} \hat{\varepsilon}(h)&#x3D;\arg \min <em>{h \in H} \frac{1}{m} \sum</em>{i&#x3D;1}^{m} l\left(h\left(x^{(i)}\right), y^{(i)}\right)+\lambda \Omega(h)<br>$$</p>
<h2 id="四、-过拟合和欠拟合"><a href="#四、-过拟合和欠拟合" class="headerlink" title="四、 过拟合和欠拟合"></a>四、 过拟合和欠拟合</h2><blockquote>
<p>  欠拟合、过拟合及如何防止过拟合 - G-kdom的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/72038532">https://zhuanlan.zhihu.com/p/72038532</a></p>
</blockquote>
<h3 id="4-1-欠拟合"><a href="#4-1-欠拟合" class="headerlink" title="4.1 欠拟合"></a>4.1 欠拟合</h3><p><strong>欠拟合是指模型不能在训练集上获得足够低的误差</strong>。换句换说，就是模型复杂度低，模型在训练集上就表现很差，没法学习到数据背后的规律。</p>
<h3 id="4-2-欠拟合解决方法"><a href="#4-2-欠拟合解决方法" class="headerlink" title="4.2 欠拟合解决方法"></a>4.2 欠拟合解决方法</h3><p>欠拟合基本上都会发生在训练刚开始的时候，经过不断训练之后欠拟合应该不怎么考虑了。但是如果真的还是存在的话，可以通过<strong>增加网络复杂度</strong>或者在模型中<strong>增加特征</strong>，这些都是很好解决欠拟合的方法。</p>
<h3 id="4-3-过拟合"><a href="#4-3-过拟合" class="headerlink" title="4.3 过拟合"></a>4.3 过拟合</h3><p>过拟合是指训练误差和测试误差之间的差距太大。换句换说，就是模型复杂度高于实际问题，<strong>模型在训练集上表现很好，但在测试集上却表现很差</strong>。模型对训练集”死记硬背”（记住了不适用于测试集的训练集性质或特点），没有理解数据背后的规律，<strong>泛化能力差</strong>。</p>
<p>造成原因主要有以下几种：<br>1、<strong>训练数据集样本单一，样本不足</strong>。如果训练样本只有负样本，然后那生成的模型去预测正样本，这肯定预测不准。所以训练样本要尽可能的全面，覆盖所有的数据类型。<br>2、<strong>训练数据中噪声干扰过大</strong>。噪声指训练数据中的干扰数据。过多的干扰会导致记录了很多噪声特征，忽略了真实输入和输出之间的关系。<br>3、<strong>模型过于复杂。</strong>模型太复杂，已经能够“死记硬背”记下了训练数据的信息，但是遇到没有见过的数据的时候不能够变通，泛化能力太差。我们希望模型对不同的模型都有稳定的输出。模型太复杂是过拟合的重要因素。</p>
<h3 id="4-4-如何防止过拟合"><a href="#4-4-如何防止过拟合" class="headerlink" title="4.4 如何防止过拟合"></a>4.4 如何防止过拟合</h3><p>要想解决过拟合问题，就要显著减少测试误差而不过度增加训练误差，从而提高模型的泛化能力。</p>
<h4 id="1、使用正则化（Regularization）方法。"><a href="#1、使用正则化（Regularization）方法。" class="headerlink" title="1、使用正则化（Regularization）方法。"></a>1、<strong>使用正则化（Regularization）方法。</strong></h4><p>那什么是<a href="https://www.zhihu.com/search?q=%E6%AD%A3%E5%88%99%E5%8C%96&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2272038532%22%7D">正则化</a>呢？<strong>正则化是指修改学习算法，使其降低泛化误差而非训练误差</strong>。</p>
<p>常用的正则化方法根据具体的使用策略不同可分为：（1）直接提供正则化约束的参数正则化方法，如L1&#x2F;L2正则化；（2）通过工程上的技巧来实现更低泛化误差的方法，如提前终止(Early stopping)和Dropout；（3）不直接提供约束的隐式正则化方法，如数据增强等。</p>
<p><strong>L2正则化起到使得权重参数 <img src="/pic/equation-20230416155658592" alt="[公式]"> 变小的效果，为什么能防止过拟合呢？</strong>因为更小的权重参数 <img src="https://www.zhihu.com/equation?tex=w" alt="[公式]"> 意味着模型的复杂度更低，对训练数据的拟合刚刚好，不会过分拟合训练数据，从而提高模型的泛化能力。</p>
<h4 id="2、获取和使用更多的数据（数据集增强）——解决过拟合的根本性方法"><a href="#2、获取和使用更多的数据（数据集增强）——解决过拟合的根本性方法" class="headerlink" title="2、获取和使用更多的数据（数据集增强）——解决过拟合的根本性方法"></a>2、<strong>获取和使用更多的数据（数据集增强）——解决过拟合的根本性方法</strong></h4><p>让机器学习或深度学习模型泛化能力更好的办法就是使用更多的数据进行训练。但是，在实践中，我们拥有的数据量是有限的。解决这个问题的一种方法就是<strong>创建“假数据”并添加到训练集中——数据集增强</strong>。通过增加训练集的额外副本来增加训练集的大小，进而改进模型的泛化能力。</p>
<p>我们以图像数据集举例，能够做：旋转图像、缩放图像、随机裁剪、加入随机噪声、平移、镜像等方式来增加数据量。另外补充一句，在物体分类问题里，<strong>CNN在图像识别的过程中有强大的“不变性”规则，即待辨识的物体在图像中的形状、姿势、位置、图像整体明暗度都不会影响分类结果</strong>。我们就可以通过图像平移、翻转、缩放、切割等手段将数据库成倍扩充。</p>
<h4 id="3-采用合适的模型（控制模型的复杂度）"><a href="#3-采用合适的模型（控制模型的复杂度）" class="headerlink" title="3. 采用合适的模型（控制模型的复杂度）"></a><strong>3. 采用合适的模型（控制模型的复杂度）</strong></h4><p>过于复杂的模型会带来过拟合问题。对于模型的设计，目前公认的一个深度学习规律”deeper is better”。国内外各种大牛通过实验和竞赛发现，对于CNN来说，层数越多效果越好，但是也更容易产生过拟合，并且计算所耗费的时间也越长。</p>
<p>根据<strong>奥卡姆剃刀法则</strong>：在同样能够解释已知观测现象的假设中，我们应该挑选“最简单”的那一个。对于模型的设计而言，我们应该<strong>选择简单、合适的模型解决复杂的问题</strong>。</p>
<h4 id="4-降低特征的数量"><a href="#4-降低特征的数量" class="headerlink" title="4. 降低特征的数量"></a><strong>4. 降低特征的数量</strong></h4><p>对于一些特征工程而言，可以降低特征的数量——删除冗余特征，人工选择保留哪些特征。这种方法也可以解决过拟合问题。</p>
<h4 id="5-Dropout"><a href="#5-Dropout" class="headerlink" title="5. Dropout"></a><strong>5. Dropout</strong></h4><p>Dropout是在训练网络时用的一种技巧（trike），相当于在隐藏单元增加了噪声。<strong>Dropout 指的是在训练过程中每次按一定的概率（比如50%）随机地“删除”一部分隐藏单元（神经元）。</strong>所谓的“删除”不是真正意义上的删除，其实就是将该部分神经元的激活函数设为0（激活函数的输出为0），让这些神经元不计算而已。</p>
<p><strong>Dropout为什么有助于防止过拟合呢？</strong></p>
<p>（a）在训练过程中会产生不同的训练模型，不同的训练模型也会产生不同的的计算结果。随着训练的不断进行，计算结果会在一个范围内波动，但是均值却不会有很大变化，因此可以把最终的训练结果看作是不同模型的平均输出。</p>
<p>（b）它消除或者减弱了神经元节点间的联合，降低了网络对单个神经元的依赖，从而增强了泛化能力。</p>
<h4 id="6-Early-stopping（提前终止）"><a href="#6-Early-stopping（提前终止）" class="headerlink" title="6. Early stopping（提前终止）"></a><strong>6. Early stopping（提前终止）</strong></h4><p>对模型进行训练的过程即是对模型的参数进行学习更新的过程，这个参数学习的过程往往会用到一些迭代方法，如<a href="https://www.zhihu.com/search?q=%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2272038532%22%7D">梯度下降</a>（Gradient descent）。<strong>Early stopping是一种迭代次数截断的方法来防止过拟合的方法，即在模型对训练数据集迭代收敛之前停止迭代来防止过拟合</strong>。</p>
<p>为了获得性能良好的神经网络，训练过程中可能会经过很多次<a href="https://www.zhihu.com/search?q=epoch&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2272038532%22%7D">epoch</a>（遍历整个数据集的次数，一次为一个epoch）。如果epoch数量太少，网络有可能发生欠拟合；如果epoch数量太多，则有可能发生过拟合。Early <a href="https://www.zhihu.com/search?q=stopping&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2272038532%22%7D">stopping</a>旨在解决epoch数量需要手动设置的问题。具体做法：<strong>每个epoch（或每N个epoch）结束后，在验证集上获取测试结果，随着epoch的增加，如果在验证集上发现测试误差上升，则停止训练，将停止之后的权重作为网络的最终参数。</strong></p>
<p><strong>为什么能防止过拟合？</strong>当还未在神经网络运行太多迭代过程的时候，w参数接近于0，因为随机初始化<a href="https://www.zhihu.com/search?q=w%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2272038532%22%7D">w值</a>的时候，它的值是较小的随机值。当你开始迭代过程，w的值会变得越来越大。到后面时，w的值已经变得十分大了。所以early stopping要做的就是在中间点停止迭代过程。我们将会得到一个中等大小的w参数，会得到与L2正则化相似的结果，选择了w参数较小的神经网络。</p>
<p><strong>Early Stopping缺点：没有采取不同的方式来解决优化损失函数和过拟合这两个问题</strong>，而是用一种方法同时解决两个问题 ，结果就是要考虑的东西变得更复杂。之所以不能独立地处理，因为如果你停止了优化损失函数，你可能会发现损失函数的值不够小，同时你又不希望过拟合。</p>
<h2 id="五、损失函数-loss-与评价指标-metric-的区别？"><a href="#五、损失函数-loss-与评价指标-metric-的区别？" class="headerlink" title="五、损失函数(loss)与评价指标(metric)的区别？"></a>五、损失函数(loss)与评价指标(metric)的区别？</h2><p><strong>当建立一个学习算法时，我们希望最大化一个给定的评价指标matric（比如说准确度），但算法在学习过程中会尝试优化一个不同的损失函数loss（比如说MSE&#x2F;Cross-entropy）。</strong></p>
<h4 id="那为什么不把评价指标matric作为学习算法的损失函数loss呢？"><a href="#那为什么不把评价指标matric作为学习算法的损失函数loss呢？" class="headerlink" title="那为什么不把评价指标matric作为学习算法的损失函数loss呢？"></a>那为什么不把评价指标matric作为学习算法的损失函数loss呢？</h4><ul>
<li><p>一般来说，我认为你应该尝试优化一个与你最关心的评价指标相对应的损失函数。例如，在做分类时，我认为你需要给我一个很好的理由，让我不要优化交叉熵。也就是说，交叉熵并不是一个非常直观的指标，所以一旦你完成了训练，你可能还想知道你的分类准确率有多高，以了解你的模型是否真的能在现实世界中发挥作用，总之，在每个epoch训练完后，你都会有多个评估指标。这样作的主要原因是为了了解你的模型在做什么。这意味着你想要最大化指标A，以便得到一个接近最大化指标B的解决方案。</p>
</li>
<li><p>通常情况下，MSE&#x2F;交叉熵比精度更容易优化，因为它们对模型参数是可微的，在某些情况下甚至是凸的，这使得它更容易。</p>
</li>
</ul>
<h2 id="六、标准化和归一化"><a href="#六、标准化和归一化" class="headerlink" title="六、标准化和归一化"></a>六、标准化和归一化</h2><blockquote>
<p>  PCA、k-means、SVM、回归模型、<strong>神经网络</strong></p>
</blockquote>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><strong>归一化和标准化</strong>都是对<strong>数据做变换</strong>的方式，将原始的一列数据转换到某个范围，或者某种形态，具体的：</p>
<blockquote>
<p>  **归一化(Normalization)**：将一列数据变化到某个固定区间(范围)中，通常，这个区间是[0, 1]，广义的讲，可以是各种区间，比如映射到[0，1]一样可以继续映射到其他范围，图像中可能会映射到[0,255]，其他情况可能映射到[-1,1]；</p>
<p>  <strong>标准化(Standardization)<strong>：将数据变换为均值为0，标准差为1的分布切记，</strong>&#x3D;&#x3D;并非一定是正态的；&#x3D;&#x3D;</strong></p>
<p>  <strong>中心化</strong>：另外，还有一种处理叫做中心化，也叫零均值处理，就是将每个原始数据减去这些数据的均值。</p>
</blockquote>
<h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><blockquote>
<p>  <strong>归一化：对处理后的数据范围有严格要求;</strong></p>
<p>  <strong>标准化:  数据不为稳定，存在极端的最大最小值;  涉及距离度量、协方差计算的时候;</strong></p>
</blockquote>
<ul>
<li><strong>归一化会严格的限定变换后数据的范围</strong>，比如按之前最大最小值处理的，它的范围严格在[ 0 , 1 ]之间；而<strong>标准化</strong>就没有严格的区间，变换后的数据没有范围，只是其均值是0，标准差为1。</li>
<li><strong>归一化的缩放比例仅仅与极值有关</strong>，容易受到异常值的影响。</li>
</ul>
<h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul>
<li>回归模型，自变量X的量纲不一致导致了**&#x3D;&#x3D;回归系数无法直接解读&#x3D;&#x3D;**或者错误解读；需要将X都处理到统一量纲下，这样才可比；</li>
<li>机器学习任务和统计学任务中有很多地方要用到**&#x3D;&#x3D;“距离”的计算&#x3D;&#x3D;**，比如PCA，比如KNN，比如kmeans等等，假使算欧式距离，不同维度量纲不同可能会导致距离的计算依赖于量纲较大的那些特征而得到不合理的结果；</li>
<li>参数估计时使用**&#x3D;&#x3D;梯度下降&#x3D;&#x3D;<strong>，在使用梯度下降的方法求解最优化问题时， 归一化&#x2F;标准化后可以加快梯度下降的求解速度，即</strong>&#x3D;&#x3D;提升模型的收敛速度&#x3D;&#x3D;**。</li>
</ul>
<h4 id="其他：log、sigmod、softmax-变换"><a href="#其他：log、sigmod、softmax-变换" class="headerlink" title="其他：log、sigmod、softmax 变换"></a>其他：log、sigmod、softmax 变换</h4><h2 id="七、回归-vs-分类"><a href="#七、回归-vs-分类" class="headerlink" title="七、回归 vs 分类"></a>七、回归 vs 分类</h2><p>回归问题可以理解为是定量输出的问题，是一个连续变量预测；分类问题可以理解为是定性输出的问题，是一个离散变量预测。</p>
<h1 id="数据基础"><a href="#数据基础" class="headerlink" title="数据基础"></a>数据基础</h1><p><img src="/pic/image-20220721233129072.png" alt="image-20220721233129072"></p>
<h4 id="sigmod-交叉熵求导"><a href="#sigmod-交叉熵求导" class="headerlink" title="sigmod 交叉熵求导"></a>sigmod 交叉熵求导</h4><p>交叉熵损失函数为：</p>
<img src="pic/image-20220330212904952.png" alt="image-20220330212904952" style="zoom:50%;" />

<p>其中：</p>
<p><img src="/pic/image-20220721232846261.png" alt="image-20220721232846261"></p>
<p>由此，得到：</p>
<img src="pic/image-20220330212956623.png" alt="image-20220330212956623" style="zoom:50%;" />

<p><strong>求导：</strong></p>
<img src="../../../../../../../../pic/image-20220330213027011.png" alt="image-20220330213027011" style="zoom:50%;" />

<p>这就是交叉熵对参数的导数：</p>
<img src="pic/image-20220330213041006.png" alt="image-20220330213041006" style="zoom:50%;" />

<h4 id="平方损失函数【绝对值、hubor损失】为例（GBDT-残差）："><a href="#平方损失函数【绝对值、hubor损失】为例（GBDT-残差）：" class="headerlink" title="平方损失函数【绝对值、hubor损失】为例（GBDT 残差）："></a><strong>平方损失函数</strong>【绝对值、hubor损失】为例（GBDT 残差）：</h4><blockquote>
<p>  $$<br>  \begin{aligned}<br>  &amp;g_{i}&#x3D;\frac{\partial\left(\hat{y}^{t-1}-y_{i}\right)^{2}}{\partial \hat{y}^{t-1}}&#x3D;2\left(\hat{y}^{t-1}-y_{i}\right) \<br>  &amp;h_{i}&#x3D;\frac{\partial^{2}\left(\hat{y}^{t-1}-y_{i}\right)^{2}}{\hat{y}^{t-1}}&#x3D;2<br>  \end{aligned}<br>  $$</p>
</blockquote>
<h4 id="softmax-函数求导"><a href="#softmax-函数求导" class="headerlink" title="softmax 函数求导"></a>softmax 函数求导</h4><p>softmax 回归的参数矩阵 $\theta$ 可以记为<br>$$<br>\theta&#x3D;\left[\begin{array}{c}<br>\theta_{1}^{T} \<br>\theta_{2}^{T} \<br>\vdots \<br>\theta_{k}^{T}<br>\end{array}\right]<br>$$<br>定义 softmax 回归的代价函数<br>$$<br>L(\theta)&#x3D;-\frac{1}{m}\left[\sum_{i&#x3D;1}^{m} \sum_{j&#x3D;1}^{k} 1\left{y_{i}&#x3D;j\right} \log \frac{e^{\theta_{j}^{T} x_{i}}}{\sum_{l&#x3D;1}^{k} e^{\theta_{l}^{T} x_{i}}}\right]<br>$$<br>其中, 1{:}是示性函数, 即 $1{$ 值为真的表达式 $}&#x3D;1 ， 1{$ 值为假的表达式 $}&#x3D;0$ 。跟 logistic 函数一样, 利用梯度下降法最小化代价函数, 下面 求解 $\theta$ 的梯度。 $L(\theta)$ 关于 $\theta_{j}$ 的梯度求解为</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
</search>
